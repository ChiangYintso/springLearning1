<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- 将对象的创建交给Spring管理 -->
    <!-- spring对bean的管理细节
            1. 创建bean的三种方式
            2. bean对象的作用范围
            3. bean对象的生命周期
     -->

    <!-- 1. 使用默认构造方法创建
            在spring配置文件中使用bean标签, 配以id和class属性后, 且没有其它属性和标签时,
            采用的就是默认构造方法构造bean对象
      -->
    <bean id="accountDao" class="pers.jiangyinzuo.learn.dao.impl.AccountDaoImpl"></bean>

    <!-- 2. 使用普通工厂中的方法创建对象(使用某个类中的方法创建对象并存入spring容器) -->
<!--    <bean id="instanceFactory" class="pers.jiangyinzuo.learn.factory.InstanceFactory"></bean>-->
<!--    <bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>-->

    <!-- 3. 使用工厂中的静态方法创建对象(使用某个类中的静态方法创建对象)并存入spring容器 -->
<!--    <bean id="accountService" class="pers.jiangyinzuo.learn.factory.StaticFactory" factory-method="getAccountService"></bean>-->

    <!-- bean作用范围
         bean标签的scope属性: 用于指定bean的作用范围, 可以取值为(常用前两项):
            singleton(单例, 默认值)
            prototype(多例)
            request(作用于web应用的请求范围)
            session(作用于web应用的会话范围)
            global-session(作用于集群环境的会话范围, 全局会话范围, 不是集群环境时就是session)
      -->
    <bean
            id="accountService"
            class="pers.jiangyinzuo.learn.service.impl.AccountServiceImpl"
            scope="singleton"
            init-method="initMethod"
            destroy-method="destroyMethod"
    ></bean>

    <!-- bean对象的生命周期
         单例对象
            出生: 当容器创建时, 对象出生;
            活着: 容器活着, 对象活着;
            消亡: 容器消亡, 对象消亡
         总结: 单例对象生命周期和容器相同

         多例对象
            出生: 使用对象时创建对象;
            活着: 对象只要是在使用过程中就一直活着;
            消亡: 当对象长时间不用, 且没有别的对象引入时, 由Java垃圾回收器回收(spring不知道)
      -->

</beans>